@22/12/30

메일제출 : 
이름_HTML수업내용정리

브라우저는 무조건 크롬 기준
korean
live sever

설정 : ctrl + ,
주석 : ctrl + /
여러줄 주석 : ctrl + shift + /
shift + alt + 아래화살표 = 한줄복사
alt + 아랫화살표 = 코드 위치이동
ctrl + z = 실행취소
---------------------------------------------------------------------------------------------------------

MVC 패턴이 나오는 이유 -> 수정,유지보수를 하기위해서
MVC : 각 역할하는 언어별로 파일을 분리
HTML,CSS,JS

코어기술만 알면된다
Front = HTML,CSS,JS
Back = JAVA

HTML = 구조를 만든다(뼈대)
CSS = 인테리어
JS = 동작(동사와 관련) 

웹 작동 방식
C   -    S 방식
     ->
  request : 요청
      <-
  response : 응답

C = Client = 브라우저
S = Sever = 모든 Data가 있는 것

http 통신규약

브라우저의 모든 타입은 "문자열"

코딩의 작동방식은 = top-down

코드해석 방식 
한줄씩 = 인터프린터
전체 = 컴파일

html 형식이 있음
 html -> dom 객체

문자열 = text node

용어를 알아야 하는이유 : 구글링 기술문서 교재

html = 요소(elements) | <html> = 태그
속성명 = "속성값"
attribute = value

단일태그, 빈태그, 홀태그
단일태그 = 종료 때 / 없음

웹 접근성 -> 화면낭독기
meta -> 문서전체를 나타내는 특징
charcacter = 문자
charset = 문자묶음

영어 = 1byte
한글 = 2bte

<h> = heading(제목)

블록요소 : 라인 하나를 다 쓰는 것
태그 = 블록과 인라인

*기본 텍스트의 폰트 크기 = 16px
&nbsp = 1개당 1칸 띄어쓰기

YOU & ME
YOU &AMP; ME  <- 이렇게 쓰는거 추천

h1 = 무조건 한번

태그 중첩가능
그룹핑 태그 = 특정영역을 묶어서 한번에 효과를 주기위해 나온 태그
주로 css와 연동

css,js = span에 ~를 ~하겠다
heading, p , span, href  <- 네개 중요!
href = host ref
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/02

UI = 사용자 인터페이스

UX = 사용자 경험 (로그인 창)

Front-end 기준 
*기획(50%) - 웹디자인(30%) - 웹퍼블리셔(20%)
시행착오가 줄어들기 때문에 기획을 굉장히 오래함

클론코딩을 한다 구조만 잘 짜도 좋다

절대 경로와 상대 경로가 있다

절대 경로 = 내 pc -> c드라이브 (잘 안씀) 절대 안변함
상대 경로 = 상대가 나오면 무조건 어딘가에 기준이 있다. 기준값이있다

참조 주소 방식 = 서버의 주소값을 참조해서 가져옴

인라인 = a 하고 이미지
src = 소스의 약자

. => 현재의위치를 나타냄 (100_html), 실제 기준 = 내가 사용하고있는 html파일
.. 은 산 꼭대기 즉 상위의
/ = 경로를 나타내는 폴더
alt = 대한 텍스트

px = 사진의 단위

이미지 관련 확장자 = *jpg, *png, *gif (여기까지 표준, 비트맵 방식, ex포토샵 해상도가 깨질수도있음)
 *svg(벡터 방식, ex애니메이션, 해상도가 깨지지 않음)

 CDN = content delievery network
 남의 서버의 정보를 가져옴

1920x1280 = 1인치에 1980개가 들어있음

alt + w = 블록처리
png는 해상도가 좋다

alt + 클릭 = 다중 커서

ul = 순서가 없는 목록 규칙성이 있음 ul = 부모 li = 자식 블록요소

zen coding 
단축코딩

ol = 순서가 있는 목록
type으로 a나 1 로마숫자로 표기 할 수 있다
start로 시작 순서를 바꿀수있다

list부터 depth가 나옴 2depth = 서브 메뉴 1depth = 주 메뉴
Dom의 위계질서,  부모 자식의 관계
{}를 쓰면 텍스트노드 사용가능

정의형 목록 : dl, dt, dd
dt는 dd이다 dt is dds

Dom 객체 = Document Object Model
Model = DB = 데이터
Document = 문서
객체 = Object
객체 = 각각의 부품
Dom에서의 객체는 태그
dom = 트리구조
> 부모자식 + 형제

tr = 가로, x축
td = 칸 나누기 table divide
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/03

지식, 기술, 태도 3가지로 평가

대문자는 중요하기 때문에 표현함

[]는 속성명=속성값을 넣을 수 있다

span은 효과를 편히 넣기 위해있는 영역표시이다

 border-collapse: collapse;
 테이블 2줄을 한줄로 합치는 것

 웹 = A~Z 까지 돌아가는게 명쾌하지 않다

 브라우저의 기본방식은 top-down
 css 똑같은 속성이 있으면 밑에 있는 것이 적용됨

 태그에는 성격이 있다 with 혈액형
 테이블 = 테이블성격
 colspan = 가로로 합치기 x축
 rowspan = 세로로 합치기 y축

 caption = 표제목 | 중앙정렬

 th = 테이블 제목

 tr>th{$}*3 

     <tr>
        <th></th>
        <th></th>
        <th></th>
    </tr>

 figure>figcaption | 중앙정렬 안됨

 colgroup
 style 편하게 하기 위해 사용

 thead 제목
 tbody 내용
 tfoot 결과

*구조라는 말이 나오면 중요!
시멘틱 = 시멘트 | 정형화 되어있는, 의미있는

본문이 되면 head => header, body => main, foot => footer로 바뀐다
header = 로고, GNB
main = section, article | role="main" 을써야함
section = 영역, 부분 | 앨범의 1집 2집 3집 
article = 기사 | 앨범의 1집에 들어가는 곡명
section, article에는 heading 태그가 하나씩 들어가있어야함

span = 인라인요소의 그룹핑 태그
div = divaide 블록요소의 그룹핑 태그
id = 이름표 중복x | ex주민등록번호
상속 = inheritance

리셋 = 브라우저에 적용되어있는 css를 초기화 시킨다

* = all
# = id를 사용할 떄

아래 3개 중요!! box modeling 3속성

박스 경계 = border
경계랑 콘텐츠 사이 = padding
박스와 박스 사이 간격 = margin

기본 리셋 5가지

 * {
            margin: 0;
            padding: 0;
        }

        h1,h2,h3,h4,h5,h6 {
            font-size: 16px; 폰트 16px
            font-weight: normal; 
        }
        a {
            color: inherit;
            text-decoration: none;
        }
        li {
            list-style: none;
        }
        img {
            vertical-align: top;
        }

1.구조 html
2.css
3.js
4.servlet/jsp

margin border padding 값을 4개를 가진다(상top, 하bot,좌left, 우right)
값이 들어가는 순서는 top이 기준이고 시계방향으로 들어간다
margin 0 auto; | auto를 쓰면 좌우 값을 잡아준다

컬러 = rgb (빛의 3원색) = 포토샵
#ffffff = 16진수로 표현한 것 
#000 = black
#fff = white

aside = 쇼핑몰 본문 말고 옆에 최근본상품 같이 따라 다니는 것

margin 0 auto = 박스 바깥의 영역
text-align: center  박스의 내용물만 움직임
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/04

웹 애플리케이션 개발자

기획(공통으로 볼수있게 만든다) -> 디자인 -> 웹개발(고정형 픽셀값) -> 백엔드
GUI

게시판 핵심 = 테이블 , 폼

Form 폼 기초 : 데이터를 서버에 보냄,  dom 구조가 정해져있음

<form action="">
    <fieldset>
        <legend></legend>
    </fieldset>
</form>

form = 양식
입력받은 데이터를 서버에 전송
method의 방식은 get, post

get=보안취약
post=보안좋음

action = 서버프로그램 파일명 |*.jsp, *.php, *asp
method = 서버에 데이터를 전송할떄의 방식 | get, post
웹에서 넘기는 데이터는 무조건 문자로 넘어간다

fieldset = 하나의 덩어리, 화면의 보여지는 박스
legend = 제목
폼에 사용되는 요소 = 인라인요소

max = 최대 몇자 이하 
mix = 최소 몇자 이상

폼 페이지 하나에는 submit이 하나
유효성 검사 = 데이터의 유효성 검사, 데이터에 문제가 없다는 검사
required = required 라고 써야하는데 required 하나만 써도 된다 틀린곳이 있는지 구별
autofocus 커서를 깜빡이게 하는 것
autocomplete 서버에 보낸 데이터를 보여준다

type = tel => 모바일에서 전화번호를 사용할떄 숫자만 나오게 하는것

radio = 데이터를 하나만 선택할 때 사용
name 속성은 꼭 맞춰줘야함 | 백엔드에서 가져가는 속성
value = db에 들어가는 값 |  속성명 : 속성값 | key ="value"
checkbox = 여러데이터를 선택할 때 사용
checked = 체크가 되어 있다

value = input 값
step = 2단계씩 넘어간다

select = 여러 데이터를 나열
optgroup 가독성을 위해 분류

datalist = 한번 선택하면 수정이 안됨
button 내부에서 사용하는 버튼 외부는 안됨
버튼 선택 못하게 하는것이 disabled
해당 속성값을 db에 넘겨야 하려면 readonly

비디오 요소를 html5에서 지원해줌
video src는 소스를 하나밖에 사용못해서 사용안함
source를 사용하는 이유는 여러개를 사용하기위해서

마임타입 = 서버에 알려주는것

muted autoplay |  muted를 사용안하면 autoplay가 안된다
loop 무한으로 시청됨
controls를 쓰면 영상을 제어할수 있음
poster = 영상의 재생이 멈출떄 보여주는 이미지

margin - 방향 사용하면 원하는 방향만 할 수 있다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/05

        video {
            width: 100%;   <- 중요
        }
width 값이 되어 있는곳이 기준이 된다 기준은 대체로 부모 또는 할아버지

영상의 높이값은 원본의 너비값에 비율에 따라 달라진다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/06

FGI (Focus Group Interview)

 페르소나(Persona)

브레인스토밍(Brainstorming) : 단어 하나로 계속 얘기하는 것
비판이나 비난 금지, 어떠한 아이디어도 수용, 적극적인 참여

 평가 = 지필 또는 포토폴리오 로 할 수 있다
 
 CSS = TOP-DOWN
 CASCADING =  폭포
 STYLE SHEET = 한 묶음 이곳에 다 저장되어있고 여기서 가져다가 쓴다

1. 내부 스타일 : title아래의 style태그를 사용하여 쓴다
2. 인라인 스타일 : 태그에 직접 style을 적용한다
3. 외부 스타일 : link태그를 사용하여 외부에서 파일을 가져온다
4. 클래스 스타일 : 태그에 class를 사용하여 아이디를 주고 style태그 안에서 .id값을 사용하여 적용한다

선택자 우선순위는 정해져 있다
범위가 적을수록 우선순위가 높다  = 희귀성이 있으면 값이 높다
요소 > 클래스
id = 구분을 위해서 사용,  같은문서내에서 한번만 쓸수있다

클래스 선택자를 제일많이 씀 = 장점은 재사용성
재사용성으로 탄생한것이 boot strap <- 망함


캐스캐이딩의 원리 = 속성값이 다를때만 적용됨

text node
<span>

전체 < 요소 < 클래스 < 아이디 < 인라인 < !important 
순으로 우선순위가 높다
important를 쓸 떄 캐스캐이딩을 이용해서 제일아래서 적용시킨다

폰트가 많이 중요함 가독성 때문
저작권 중요

외부에서 가져오는 것을 CDN이라고 한다

lorem = 의미없는 더미텍스트

px = 픽셀은 고정값
브라우저랑 상관없음
상대값나오면 어딘가에 기준값이있다
별도 설정이없으면 부모가 기준
16px을 기준으로 계산

em단위
1em = 16px = 100% = 1rem
em의 불편함을 상쇄한것이 rem
rem = root em
root = html = 브라우저

행간 = 문자와 문자사이 간격 |  기본이 1em
행간의 기준값은 폰트크기

1.5~1.75가 사람이 보기좋은 행간

브라우저 기준 행간을 위의반 아래의반을 각각 준다
baseline = 기준선

16px/1.5em
/로 폰트뒤에 바로 행간을 쓸수있다
bold 와 italic도 클론 다음에 사용할수있다

font face
가지고있는 폰트를 메모리에 올려놓고 다른사람이 볼때 보이게 하는것

---------------------------------------------------------------------------------------------------------
PS

1280 x 800 = 해상도
72ppi = pixel per inches 1인치당 8~9개 픽셀이 들어가있다
웹의 기본은 72ppi

400이 노말
bold = 700  노말이랑 bold 만 중요함

bolder = 900
300 ~ 900까지 있음
폰트마다 두께는 일정하지않음
폰트는 인용구안에 안써도된다
단어 + 단어 가 만나는 폰트일떄 사용
앞에있느것이 안되면 뒤에있는 대체폰트가 적용된다
sans-serif 고딕체
cursive = 흘림체

투명도 = 0~1사이의 값
1이면 불투명 
0이면 투명도 100%

평가에 나올수도있음 문서전체 폰트바꾸기

---------------------------------------------------------------------------------------------------------
@23/01/10

스토리보드 = 기획서  디자인 + 개발자가 같이 보는 것
스타일 가이드

와이어 프레임 = 대충 그려 놓는것 밑그림이랑 비슷함

평가 문답형에서 나올수도있음

레이아웃 = 박스들이 움직이면서 자리를 잡는 것

box = 블록요소
*** block 요소와 inline요소 의 큰 차이점은 width값을 적용을 받느냐 안받는냐
block은 width값이 들어가고 inline은 width값이 안들어간다

box의 중요속성
margin padding border
마진, 안쪽여백, 테두리
상하좌우에 값이 들어가고 시계방향으로 회전

$ <= 1번부터 순서대로 나옴

border: 1px solid #000;  <= 한줄표기법
solid = 실선
double
dashed 

*box의 기본성격 
box width값, 안쪽여백값, border  margin은 안들어감
박스 width값은 = width + border + padding

box1 = 200 + 20 + 20 + 4 + 4 = 248
box2 = 200 + 10 + 10 + 4 + 4 = 228
box3 = 200 + 15 + 15 + 4 + 4 = 238

너비를 바꿀려면 width값과 height값을 바꾼다

*마진 겹침현상(마진 컬랩스)
-좌우는 상관없음 
-상하만 적용됨 값이 
-큰 값 하나만나옴
-마진일때만!!
해결방법 = 마진 적용시 한방향으로 코딩, mb면 mb mt면 mt

display = 박스에는 기본적으로 블록이 되어있음
크게 3개가있음
block, inline
바꿀수가있음

inline-block
블록성격과 인라인성격을 모두 가짐
가로배치가 된다

CTRL + H = 원하는 것을 한번에 바꾸기

.box${$번째 박스}*3  <= 이렇게 쓰면 기본 박스 = div

box-sizing: border-box;
박스 크기를 정할떄 border안쪽은 자동으로 계산됨

** 레이아웃을 잡을 때 중앙에 잡는것
height 값과 line-height 값을 같게한다 em으로 하지말고 px로 맞춰서 하면됨

border-radius: 16px;
border 가장자리 둥글게 만드는 것

하위선택자(자손선택자)
.gnb li 
마지막 li 박스에는 가상클래스 선택자를 사용

가상클래스 선택자
.gnb li:nth-child(4)
구조 | 기본은 콜론 
first child, last child, nth-child

선택자 우선순위 1등 = !important

링크 = a요소

hover = ~위에, 호스트 | 마우스가 올라갔을 때 나오는 속성


***배경이미지 속성 4개 외워야함!!
1. bgi = background-image: url();  
위에 텍스트를 겹쳐서 쓸수있다

2. bgz = background-size: auto; 기본값은 auto 
background-size: contain = 너비기준으로 원본이나오고 남은곳은 패턴으로 보여준다
background-size: cover = 반응형이랑 관련있다 | 가변형 이미지, 브라우저가 알아서 덮어준다

3. background-repeat: no-repeat; = 반복 
no-repeat 반복안함 
repeat-y = 축으로 반복 repeat-x = x축으로 반복

4. background-position: 0 0; = 위치 | 처음값은 x축

background-attachment: fixed; 컨텐츠의 상관없이 절대값이다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

@23/01/11

letter-spacing: -1px; = 들여쓰기

가독성 위계질서 때문에
영문일경우 -값을 준다

그라이언트 2가지의색이 변화하는 중간과정
선형은 위치에 따라서 그려지는 것
크롬에는 아직 적용안되서 -webkit-를 적용해준다
-webkit- 브라우저에서 읽을수있는 엔진
prefix = 접두사

deg  = degree = 각도
linear = 선형 왼쪽에서 오른쪽
radial = 원형 안쪽에서 바깥으로
circle = 원형으로

---------------------------------------------------------------

PS
이미지 OPEN 다음 
 CTRL + R 길이를 재는 자가 나옴 (자 단위)
그다음 I를 누른다
포토샵은 기본적으로 면 개념이다
전경색과 배경색이 있다
밑에 배경색은 캠버스라고 생각하면됨
왼쪽에 있는 색깔을 더블클릭한다
그러면 헥스값이나온 것을 복사해서 사용한다

ctrl + n 새로만들기
d = default 기본색으로 바뀜

**포토샵의 핵심 
1. layer
2. 선택 select

layer 층 구분

CTRL + [] 레이어에서 왼쪽이 내려가는 것 오른쪽이 올라가는것
삭제 = 선택하고 휴지통누르면 됨 휴지통에 드래그도 됨
SHFIT 누르고 드래그하면 수평 수직 45도 움직인다
복붙도 가능

하얀색에 빨간색 줄이 쳐저있으면 색이 없는것

무브툴 = V
무브툴을 키고 ALT 누르고 드래그하면 복사

CTRL + Z 는 실행취소
SHFIT CTRL Z = 실행 취소 전으로돌아감

CTRL + SPACE = 확대
CTRL + SPACE + ALT = 축소

SPACE  = 핸드툴

돋보기 두번은 원래 크기로 되돌리기
CTRL + G = 그룹화시키기

CTRL + K  설정
CTRL ALT C = 캠버스공간을 늘리거나 줄이거나할수있음
CTRL + H 선택영역 사라짐
CTRL + E 레이어 두개를 하나로 합침
실제 레이어는 오브젝트만 들어가있고 배경은 투명이다

웹용으로 만드는 법
CTRL 누르고 마우스로 썸네일 누른뒤에 CTRL + C누르고 CTRL N 누르고 CTRL V
CTRL SHIFT ALT S 웹용으로 저장할떄 

첫번쨰꺼 체크해야함
alt ctrl i = 이미지 사이즈 조정

개발자도구에서 ctrl shift p 캡쳐를 영어로 쳐서 풀사이즈로 저장

셰이프 에어리어 꼭 보여줘야하는 공간

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/12

***여러가지 선택자 4개 암기필수

/* 1. 자손선택자(하위선택자) */
        #wrap ul
/* 2. 자식선택자 */
        #wrap > ul
/* 3. 인접형제선택자(첫번쨰 형제만 선택) */
        header+p
/* 4. 형제선택자(모든 형제 선택) */
        header~p

속성 선택자
속성명 = 속성값
/* 1. 속성선택자(=일치하는) */      <=제일 많이씀
        a[target="_blank"]
/* 2. 속성선택자(~=포함하는) */
        a[class~="portal"]
 /* 3. 속성선택자(^=시작하는) */
        a[href^="http"]
/* 4. 속성선택자($=끝나는) */
        a[href$=".net"]
 /* 5. 속성선택자(*=모두,값의 일부도 포함) */
        a[title*="kor"]

/* link관련 가상 클래스 */
a:link
a:visited
a:hover
a:focus
a:active 


#옆에 id값을 쓴다

<!-- section#intro.contents>h2{TEST}+p{aaa} -->
        <section id="intro" class="contents">
            <h2>TEST</h2>
            <p>aaa</p>
        </section>

에러떄문에 하위선택자 사용

/* 가상클래스 target => 앵커 대상에 스타일 적용 */
#intro:target
#intro:target {
            background-color: #0069e0;
            color: white;
        }
id값이 intro인 것을 누르면 배경색과 글자색이 바뀐다

가상클래스 선택자 : not | 특정요소를 제외하고 스타일 적용
#signup input:not([type=radio]) type이 radio가 아닌것만  적용

[중요] input이 체크가 되었을떄 label에 효과주기     <= 모바일에서 자주사용
#signup input:checked+label

input에 체크가 되면 형제인 레이블에 효과를 준다

요소는 어떤한 것을 만드는 것
요소명.클래스명
before / after 두개만 기억하면된다

#wrap ul li.new::after

li의 클래스가 new인 곳에 새로운 요소를 하나만든다

even 짝수
odd 홀수

 /* 수식 사용하여 선택하기 */
        /* table tr:nth-child(2n) {        <=짝수
            background-color: gray;
            color: black;
        } */

        /* table tr:nth-child(even) {      <=짝수
            background-color: lightgray;
            color: black;
        } */

        /* table tr:nth-child(odd) {       <=홀수
            background-color: lightgray;
            color: black;
        } */

        table tr:nth-child(2n+1) {        <= 짝수의1을더한 수(홀수라고 보면됨)
            background-color: orange;
            color: black;
        }
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/13

**Float = 박스레이아웃을 잡는 첫번째 기술 = 가로배치 프로젝트 할 때 많이씀
띄우다 뜨다 라는 뜻이있다 | 블록요소 | 살짝 떠서 움직인다
0. 해당 박스에 float 선언
1. 해당 float 박스는 width값을 가진다, 인라인블록요소 비슷하게 바뀐다
2. float을 선언했으면 해제를 꼭 해줘야한다 해제는 띄워져 있던 것을 바닥에 딱 붙여서 끝을낸다

부모의 너비값이 중요 부모의 너비값을 절대 넘으면 안됨
양쪽 정렬 text aline justify
float를 쓰면 밑에 있는 css가 꺠진다 떠있기떄문

플롯해제
1. 부모박스에 ~을 코딩한다(기법에따라다름)

밑에 있는 애들은 float과 관련된 속성을 가져야한다

**[중요]clear both 전제조건 :  막내동생한테 사용한다(제일 마지막에있는 놈에게 사용한다)


**가상요소로 float를 해제 함     <= 외워야함 계속 쓴다
#content::after {
            content: "";
            display: block;
            clear: both;
        }
content로 빈 문자열을 하나만들고
display로 혈액형을 inline비슷한거에서 block으로 바꾸고
막내동생한테 사용하는 float해제인 clear:both를 사용한다

float를 할때 부모자식을 만들어야한다 

**float : right를 하면 순서가 바뀌어서 나오는데
ul 에다가 float : right를 사용하고 li에 float : left를 사용하면 순서가 바뀌지않고 나온다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/16

플롯의 기본 = 형제끼리의 플롯을 준다
header 아래 자식으로 h1, nav 가있고 h1의 float:left nav의 float:right를 주고 header에서 플롯해제를 한다
li에서 플롯을 사용하고 부모인 nav에서 플롯을 사용하면 li의 플롯은 자동으로 해제가 된다
이미지가 width값을 가져서 따로 width값을 안줘도 된다

2단플롯은 길상백호만 기억하면된다

a -> b 중간과정이 없다
원래있던박스가 b로 변하는것을 트랜스폼이라 한다
접두어를 붙어주어야한다

값이 양수면 가운데로
값이 음수면 반대로

X축, Y축 이동
transform: translate(10px,20px)

크기변환
transform: scale(0.8)

회전
 transform: rotate(-20deg);
양수면 시계방향으로 돈다 | 음수면 시계반대방향으로 돈다

위에 3개만 알면된다

기울이기(왜곡)
transform: skew(30deg,0)

트랜지션은 애니메이션이랑 구분만 할줄 알면 된다
트랜지션 = a -> b
동그라미에서 네모로 바꾸는 트랜지션을 걸면 중간과정을 브라우저에서 해준다
트랜지션도 시간이있어야한다

 /* transition 시킬 CSS 속성명 */
transition-property: width,height,background-color;

/* transition 시킬 시간 */
transition-duration: 1s;

/* 한줄표기법 */
transition: all 1s;

애니메이션은 제약이없다
애니메이션은 무조건 시간이있어야한다

property = 속성

/* 1. linear : 같은 속도로 트랜지션 진행 */
        .linear {
            transition: all 1.5s linear;
        }
        /* 2. ease : 처음에는 천천히 시작, 점점 빨라진 후 마지막에 천천히 트랜지션 진행 (기본값) */
        .ease {
            transition: all 1.5s ease;
        }
        /* 3. ease-in : 처음에는 천천히 시작 */
        .ease-in {
            transition: all 1.5s ease-in;
        }
        /* 4.ease-out : 끝은 천천히 함 */
        .ease-out {
            transition: all 1.5s ease-out;
        }
        /* 5. ease-in-out : 끝을 천천히 함 */
        .ease-in-out {
            transition: all 1.5s ease-in-out;
        }
        /* hover 시 높이값이 적용되면서 트랜지선 실행 */
        #tr_speed:hover div {
            height: 200px;
        }

쇼핑몰에서 물건 글자크기 두께 컬러 위계질서가있다
상품명을 쓸때는 2줄쓰기

위치잡기
구조 = float flex + position
position = 박스를 겹쳐보이게하는 기술

position: absolute;  
left: 0;                = 기본
top: 0;

조건이 하나있다  = 위치 기준값을 정해줘야한다
position: relative; = 위치 기준값이 부모한테 잡힌다

포지션들끼리 겹치고 내가 보여주고 싶은걸 보여줄떄 z-index: 1;를 사용한다

opacity: 1; = 투명도 조정하는 것


/* 트랜지션 효과 */
        .prod_list .caption {
            width: 300px;
            height: 200px;
            padding-top: 20px;
            background-color: rgba(0, 0, 0, 0.4);
            /* 포지션 */
            position: absolute;
            left: 0;
            top: -200px;
            z-index: 1;
            opacity: 0;
            /* 트랜지션 */
            transition: all 0.2s linear;
        }
        /* 트랜지션 호버시 동작(여기가 핵심) */
        .prod_list li:hover .caption {
            transform: translateY(200px);
            opacity: 1;
        }
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/17

트랜지션
a -> b
애니메이션은
a ->b -> c -> d

애니메이션은 키프레임을 설정 해줘야한다

@ 이것이 붙으면 메모리에 바로 올라간다
브라우저에 로딩이 되자마자 바로 실행이된다

from = 시작될떄 모양
to = 끝이 날떄 모양

사각형에서 원형을 만드는 법
border-radius: 50%;


포지션 = 레이아웃잡기는 아주쉽다
박스가 겹칠 때만 사용
모바일 제일 상단에는 자주사용

position: relative; = ~연관된
relative를 사용하면 위치값을 쓸수가 있다 (top,bottom,right,left)
기본값은 = left: 0;
            top: 0;
            z-index: 1;  = 순서
위에 3개는 무조건 가진다

relative = relative가 가지고있던땅은 아무도 못들어온다
relative만 hole이 있고

absolute = 절대값
absolute = hole이 없다
absolute선언하면 반드시 위치기준값을 정해줘야한다
기준값을 안정해주면 fixed랑 다른것이없다
absolute가 있던자리에 다른 박스들이 들어온다

fixed 도 hole이없다
fixed가 있던자리에 다른 박스들이 들어온다
브라우저 크기가 바뀌어도 고정된 값으로 고정되어있다

z값을 올리면 박스가 제일 위로 올라간다
제일 위로 올리고 싶으면 9999
제일 아래로 내리고 싶으면 -(마이너스)값을 준다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/18


3단 플롯을 사용할 때 왼쪽 박스와 가운데 박스를 하나의 div로 묶어서 상위 박스를 하나 만들고
그 상위 박스와 오른쪽 박스가 형제가 되게 만든다
왼쪽박스에 float : left; 를 주고 가운데 박스에 float : right(left); 를 주고
상위 박스에서 해제를 하여도 되지만 상위박스에서 float을 사용하면 해제할 필요가 없다
그리하여 상위박스에서 float : left;를 사용하고 오른쪽 박스에서 float : right(left);를 사용하고
상위박스와 오른쪽박스에 부모한테서 float해제를 해주면 3단 플롯이 완성이 된다
3단플롯이 어려울 때는 루브르를 많이 연습하면된다
2단플롯이 어려울 때는 길상백호를 많이 연습하면 된다

---------------------------------------------------------------------------------------------------------
PS

F8번은 INFO
픽셀너비값을 보는것

1920X2000
아트보드가 나오면 레이아웃에서 플렛이미지누르면 됨
배경이미지가 합쳐지는것

좌우 300씩 잡아서 1320크기를 잡는다
1320 = MARGIN 0 AUTO 기준
1320 = 세이프 에어리어 보여주어야할것은 여기 안에만 쓴다
#wrap = width 1320px 으로 잡으면 된다

alt +  backspace = 전경색 넣기

레이아웃 2개를 선택하고 무브툴로가면 메뉴쪽에서 버티컬을 선택할수있다

shift + 방향키 = 10px씩 움직인다
마크툴로 재서 몇픽셀인지 본다

그리드 시스템 grid system
가독성 때문에 사용 잡지,신문 같은것

1320 에서 좌우 20씩 빼면 1280으로 만든다

이미지를 불러오고 이미지사이즈를 1920사이즈로 맞추고
이미지에서 adjustment에서 레벨과 커브를 선택해서 오토로 한다

배경을 무브툴로 끌어다가넣고
레이아웃에서 이미지를 선택하고 마우스우클릭한다음에 create cliping mask를 사용하면 헤더영역만 이미지가 들어간다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/19

플렉스(flex) 박스
: CSS3에서 처음 소개된 속성 => 가변적 박스를 만드는 기술과 자유로운 박스 배치 기술임

가변 = 상대단위 = %

flexable에서 가져왔다 = 유연한
footer에 공백을 띄우려면 margin bottom을 주면 안된다
마진은 박스끼리의 공백을 띄우기 위해 주는거기 때문에

Dom = 부모 자식 관계
flex박스는 자기 자식만 해당됨 다른 자식은 안됨

# 용어
        개념1. 플렉스 박스 = 부모박스에 CSS 속성 코딩
                            display: -webkit-flex;
                            display : flex;
        개념2. 플렉스 아이템 = 부모박스에 display:flex가 선언되면
                                그 자식박스는[플렉스 아이템]으로 변경되고,
                                펠렉스 아이템이 레이아웃 됨.

플렉스 박스의축 = x축 y축
기본은 가로배치

부모박스에 플렉스 선언
자식들만 플렉스 아이템으로 변경디면서
플렉스 아이텀이 가로배치가 된다
콘텐츠 양만큼만 가로값을 가진다

플렉스 아이템 여러줄 배치(flex-wrap) => [부모박스]에 설정
        :플렉스 박스안에 플렉스 아이템이 배치될 떄 기본적으로 한줄로만 배치될
        플렉스 아이템을 여러줄로 배치하고 싶으면 flex-wrap 사용
        # 속성명 : flex-wrap
        # 속성값 : nowrap(기본값), wrap

flex-wrap:nowrap
display: flex;
        flex-direction: row;
        flex-wrap: nowrap;

flex-wrap:wrap
display: flex;
        flex-direction: row;
        flex-wrap: wrap;

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/20

플렉스 아이템 주축방향배치(justify-contnet) = [부모박스]에 설정
        : 플렉스 아이템 주축의 시작점부터 배치
        # 속성명 : justify-contnet
        # 속성값 : flex-start[기본값], flex-end, center, space-between, space-around


justify-content: flex-start; 왼쪽끝에 붙음

justify-content: flex-end; 오른쪽 끝에 붙음

justify-content: center; 박스들을 가운데로 배치한다 margin 0 auto;랑 비슷하다

justify-content: space-around; 박스하나당 좌우에 똑같은 간격을 갖는다

justify-content: space-between; **제일 많이 쓴다 
첫번쨰 박스하고 마지막박스는 부모박스 양쪽에 무조건 붙고
나머지 박스들은 공평하게 브라우저가 딱 나누어준다


플렉스 아이템 교차축방향배치(align-items) => [부모박스]에 설정
        : 주축(row일때 X축, column일때 Y축)의 수직방향으로 플렉스 아이템 배치
        # 속성명 : align-items
        # 속성값 : stretch[기본값], flex-start, flex-end, center, baseline


height에  min = ~이상 max= ~이하
mix max = 가변이랑 관련있는 접두어


기본으로 쓴다
display: flex;
            flex-flow: row wrap;
            justify-content: space-around;


align-items: stretch; = 기본값

align-items: flex-start; 해당라인에 시작선부터 나옴

align-items: flex-end; 해당라인에 끝선부터 나옴

align-items: center; 축의 가운데에 나옴

align-items: baseline; 폰트기준으로 박스가 잡힌다


플렉스 아이템 교차축방향 개별 배치(align-self) => [플렉스 아이템]에 설정
        : 교차축 방향으로 플렉스 아이템에 개별적 배치
        # 속성명 : align-self
        # 속성값 : flex-start, flex-end, center ...

부모에서 플렉스아이템을 상속받기 싫으면 개별적으로
자식들에게 align-self 를 사용한다

height : auto; 기본값

플렉스아이템 순서 바꾸기(order) => [플렉스 아이템]에 설정 : HTML 코딩이나
      탭 순서와 상관없이 화면에 보이는 순서에만 영향을 줌 => 구조에는 영향을
      못끼침 # 속성명 : order # 속성값 : nth, n=숫자


플렉스아이템 너비확대축소(flex) => [플렉스 아이템]에 설정
        : 플렉스 아이템의 너비를 설정하는 것
            증가너비 [기본값 0] | # 속성명 = flex-grow,
            감소너비 [기본값 1] | # 속성명 = flex-shrink,
            기본너비 [기본값 auto] | # 속성명 = flex-basis
        
    코드예시
        선택자 {
            flex: 1 1 0; //증가너비 감소너비 기본너비
            flex : 1 0; //증가너비 감소너비
            flex : 1 20px; //증가너비 기본너비(단위를 사용하면 기본너비가 적용)
        }
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/01/25
폰트어썸4.7사용

vertical-align
수직방향 inline에만 적용됨 block에는 적용안됨

prefixfree.min.js 이것을 넣으면 prefix를 안넣어 줘도 된다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/03

Responsive Web = 대답,반응하는 웹
어디에 반응을 하냐? = 브라우저의 너비

PC , mobile, 태블릿 세 대에 너비의 반응
제공하는 기술은 딱 두개

전제조건 
1. 단위는 가변단위를 써야한다 ex) %

단수 바뀌는 것이 반응형 웹
가장 기본 = 4, 2, 1 짝수단위로 바뀐다

pc기준(px) -> 가변형(%) -> 반응형(%)

**(Width값/기준 값) * 100**

**나온 값은 모두 입력한다 올림,내림,반올림X**

2. meta에 viewport가 있어야한다(pc는 상관x)
너비를 알려줄 때 기준값이 있어야함

반응형에서는 뷰포트와, 미디어쿼리만 있으면된다


미디어 쿼리 = 너비값이 몇이냐고 물어보는 것
[] = 생략가능

360까지 모바일
768까지 태블릿
1024까지 pc

무조건 외우기 미디어쿼리
/* 모바일 미디어 쿼리 360px 이상 */
@media screen and (min-width:360px){}

/* 태블릿 미디어 쿼리 768px 이상 */
@media screen and (min-width:768px){}

/* PC 미디어 쿼리 1024px 이상 */
@media screen and (min-width:1024px){}


반응형은 구조는 무조건 1개

모바일 기준으로 먼저 만들고 min사용 = mobile first

가변을 만들 떄 마진도 넣어줘야 된다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/06

padding 가변
px이랑 병행해서 사용해도 상관없다

부모의 100%값과 자식의100%값은 다르다

이상 = min 숫자가 낮은 것 부터 작성
이하 = max 숫자가 높은 것 부터 작성

@media screen and (orientation: landscape){} = 화면을 가로로 볼 때 보이는 이미지
@media screen and (orientation:portrait){} = 화면을 세로로 볼 때 보이는 이미지

미디어쿼리 조건문에 없는 애들은 공통 css가 들어간다

3n 3n+1 3n+2 = 3의배수,3의배수다음,3의배수 그다음 jsp에서 많이씀


중요
고정형(px) => 가변형(%) => 반응형
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/07

햄버거 메뉴 = 가로줄 3개짜리 메뉴

폰트어썸 cdn = <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

포지션에서 무조건 위에 먼저 보이게 하고 싶으면 z값을 9999를 준다

display : none; 구조에서 없어지는 것 중요함

/* display: none; 의 반대*/
        display: block;

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/09

header .gnb li a:focus 실무할 때 써야함

KEY_VISUAL
한 페이지에 시선을 끄는 것들

letter-spacing : 자간 영어는 -값주는것이 좋다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/14

HTML

rem = html기준
font-size: 62.5%;으로 하면 기본 10px로 바뀐다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/15

멀티 패럴렉스

box-shadow: inset 내부 안쪽에 박스그림자를 넣는다

background-attachment: fixed; = 배경이미지 고정

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/16

a에다가 값을 줄떄 
display: inline-block; 을 사용한다

간격시스템 = 4의배수 8의배수 기준으로 잡아서 코딩한다


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/17


appearance = 브라우저에 기본적으로 설정되어있는 요소를 표현
select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}


/* 배경이미지로 화살표 넣기 */
select {
    background-image: url(../images/arrow_bot.jpg);
    background-repeat: no-repeat;
    background-size: 32px 32px;
    background-position: 255px;
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/21

사이트 아이덴티티 = 사이트의 정체성

반응형은 기본적으로 구조는 1개
보이는 영역이 3개가 된다

변화시키고 싶은 것만 코딩
대체로 단수가 바뀐다 4단 -> 2단 -> 1단
PC에서 두줄로 보이게 할려면 br을 사용한다

주조색 = 메인색 primary색
보조색 = second색
강조색 = 사용성이 떨어진다

템플릿 = 기본이 중요하기 떄문

/* 모바일 속성값을 초기화 */
        /* width 초기값 */
        width: auto;
        /* background 초기값 */
        background: none;
        /* 포지션 초기값 */
        position: static;
        /* display 초기값 */
        display: block;

text-align: left; 기본값


        /* 268 = 1132에서 마진20*3를 빼고 난 px을 4로 나눈 값 */
        /* 268/1132*100 = 23.674911660777383 */
        width: 23.674911660777383%;

.work_section .work_list li a:hover::before
원래는 뒤에 쓰는 것이지만 가상클래스일경우 앞에 써준다


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/22

모바일을 만들때는 좌우 16px씩 컨텐츠가 없다

PC와 모바일용을 따로 만든다.
@@@@(중요)모바일은 무조건 너비값을 주면 안된다(px이 width에 들어가면 안된다)

index파일 안에 if를 넣어서 너비값이 몇이면 pc로 가게 하고 모바일로 가게 나눈다
모바일은 viewport가 무조건 있어야한다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/23

float으로 중앙정렬을 할떄
왼쪽 left 오른쪽 right 가운데는 text align center을 사용


input을 클릭하면 첫번쨰 햄버거에의 위치를50%로 이동시키고 45도 회전
input[id="menuicon"]:checked+label span:nth-child(1){
    top: 50%;
    transform: translateY(-50%) rotate(45deg);
}

햄버거 버튼을 누르면 메뉴가 보이고 안보이는 것
input[id="menuicon"]:checked + label + nav{
    left: 0;
}

메뉴 중에서 마지막인 share는 호버를 없애기 위한 코드 (다 기본값으로 돌려놓는다)
.mobile_gnb .gnb>li:last-child:hover {
    background: none;
    cursor: default;
}
.mobile_gnb .gnb>li:last-child>a:hover {
    color: #fff;
    font-weight: 400;
    cursor: default;
}

검색창 같은 곳에 효과를 주려면 hover focus active를 사용
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/24

css속성을 변수에 넣고 속성명만 주면 분기를 할 수 있다
초기값은 default값

// 버튼을 누르면 더 많은 버튼들이 나오고 close를 누르면 닫히는 함수

변수를 할당하고 display가 none이면 dots를 보이게 바꾸고 btnText를 
text메서드를 사용하여 +MORE로 보여주고 moreButton을 안 보이게 display : none로 바꿔준다


배경동영상 같은 것은 이벤트같은 이목을 집중시킬떄 사용

//동영상 가운데 오게 하는 법
$(window).height(); 로 전체 높이를 구한 뒤
변수에 var halfHeight = bh/2; 를 하여 중간값을 구하고
그 중간값 만큼 margin-top을 사용한다
$('.youtube').css({'margin-top':halfHeight});
그리고 css로 가서 transform: translateY(-100%);를 사용한다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/27

video.get(0)
비디오에서 제공하는 메서드
비디오에 모든것을 가져오는 메서드

if(video.get(0).paused){
    만약 비디오의 모든것이 멈춰있으면
                video.get(0).play();
                비디오를 재생시켜라
                btn.html('<i class="fa fa-pause-circle-o" aria-hidden="true"></i>');
                그리고 일시정지버튼을 나타내라
            }else {
                그렇지않으면
                video.get(0).pause();
                비디오를 멈춰라
                btn.html('<i class="fa fa-play-circle-o" aria-hidden="true"></i>');
                그리고 재생버튼을 나타내라
            }

html(); => 제이쿼리에서 태그를 사용할 떄 쓰는 메서드

가변 = 어딘가에 기준점이 있다
단위가 v로 시작
VW VH만 인지하면 된다

viewport하면 무조건 브라우저
PC => viewport가 의미가 없다 모니터 해상도에 따라 고정됨
모바일은 meta에 있는 viewport값이 있다

vw vh 를 %로 생각하면 된다

object-fit: fill;
비디오를 꽉차게 만드는 메서드
그러나 원본을 사용하는 것이 좋다

const 불변변수키워드

// 사운드 무음으로 초기값 설정
video.prop('muted',true);
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/02/28

HTML
()가 붙는건 메서드 
--text-color: #f0f4f5; => 이렇게 선언을하고
color: var(--text-color); => var에 담아서 사용한다

display flex에서 
display none의 반대는 display flex이다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/02

Bread Crumbs = 빵 부스러기 = 웹에서 경로나오는 것

position:sticky

스크롤 위치가 설정 영역에 닿았을때 그 위치가 박스에 붙는다
설정한 포지션에 해당 박스가 고정됨 => relative + fixed
부모(조상)에 overflow:hidden시 작동 안됨

형제선택자 ~ 

include = ~포함된

load 할 때 두번째 인자값에 콜백함수를 사용한다

// Header 페이지 추가
    $('.header').load('./include/header.html',function(){
        $('.menu_toggle_btn').click(function(){
            $('.gnb').stop().toggle();
        });
    });
    
header.html을 불러오고 햄버거가 눌러도 안나오니까 두번쨰 인자값에 익명함수를 넣고
햄버거를 나오게 하는 함수를 넣는다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/02

트랜지션과 애니메이션에 차이는 
트랜지션은 a -> b
애니메이션은 a -> b -> c -> d
애니메이션은 keyframe이 있어야한다

메모리에 처음 올리는 상태 = load(); = 동영상 처음상태로 돌리는 메서드






