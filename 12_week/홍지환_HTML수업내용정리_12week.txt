ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
---------------------------------------------------------------------------------------------------------
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/13

형변환 () 괄호안에 데이터타입을 쓴다 ex) (float)num2

자바는 연산자기준으로 전위 후위를 정한다


대입연산자(할당연산자) = (연산우선순위) 최하위

산술연산자 = 사칙연산 +,-,/,*,%(나머지)

증가연산자 = 1씩 증가(++변수) => 결괏값이 바로 적용

d. 부호 연산자
: 피연산자의 부호를 반대로 변경한 결과를 반환, 양수면 음수 | 음수면 양수
+ 형식적 추가로 쓰이는 경우 거의 없음
기본형에만 사용가능 | 단, boolean형 char형 제외

논리연산자 = &&(논리곱 = 참%%참 => 참), ||(논리합 = 참||거짓 => 참), !(논리부정 = 단항연산자 => 결과값의 반대)

복합대입연산자 : 대입연산자와 다른 연산자를 조합하여 사용, 데이터 누적 | +=,-=,*=,/=,%=

삼항조건 연산자 : 조건식>결과1(true일경우 실행) : 결과2(false일 경우 실행)

유니코드(Unicode) = 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업표준

Math.round() 반올림 = 반올림시 사용. 소숫점 첫째자리에서 반올림한 결과를 (정수)로 리턴

나머지 연산자 : 나누는 수를 0으로 사용할수 없음. 피연산자로 정수, 실수 허용함

나누는 수로 음수를 허용, 그러나 부호는 무시됨 = 음수의 절대값으로 나누는 것과 같음

a. 산술 변환
: 이항 연산자는 두 피연산자의 타입이 일치해야 연산 가능.
연산전에 큰 데이터 타입으로 자동형변환 되는것
=> 데이터 소실이 없어야 하기때문에 당연

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/14

equals()는 문자열을 비교하는 것
== 는 주솟값을 비교하는 것

데이터 형(약강제)로 바꾸는 것 = Casting
Java는 데이터형을 굉장히 엄격하게 다루고 있으므로, Casting은 굉장히 중요함
	
형변환 연산자
: 변수나 리터럴 타입을 다른 타입으로 변환하는 것
	
자동형변환
: 서로 다른 타입 간의 대입이나 연산을 할때, 먼저 형변환으로 타입을 일치시키는 것이 원칙
단, 경우에 따라 컴파일러가 자동으로 생략된 형변환을 해줌


문자 하나는 유니코드로 전환가능 '0' = 48

switch case문의 계산결과는 기본적으로 정수 범위에 있는 숫자만 올수 있다
조건식 계산결과는 int 범위 이하의 정수만 가능

반복문 while : ~하는 동안
[형식]
while(조건식) { // 조건식이 참인 경우 반복 수행
	수행문;
	증감식; // (중요) 반드시 있어야함 없으면 무한루프
}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/15

continue문을 만나면 실행하지 않고 증감식으로 올라간다

/* 5. for문 기타형식 */
			
초기식 생략 : 이전에 다른곳에서 변수가 초기화 되어 있을 때
for(;i<5;i++){실행문;}

조건식 생략 : 어떤 연산의 결괏값이 나왔을때 for문 반복수행을 멈추려고 할때 | if문과 함께 사용

int sum = 0; int hap = 0;
for(i=0; ; i++) {
실행문;
sum += i;
if(hap>100) break; // 조건식 영역 false
}

증감식 생략 : 증감식 연산이 복잡할때 for문 안에 코딩
for(i=0; i<5; ) {
i = (++i);
}

모두 생략 : 무한루프 = 서버실행시
for( ; ; ) {}


do~while문
: 코드블록 {}을 먼저 수행한 후 조건식을 평가함
do~while문 무조건 {} 한번은 수행함
사용빈도는 낮음

배열(Array)
: 변수 => 자료 한개만 저장되는 공간
배열 => 같은 변수명에 (자료형)이 같은 여러개의 데이터가 저장
자료 구조의 가장 기본
배열의 자료형 = array(배열형)

Arrays.toString
배열의 값을 찍어주는 메서드
배열의 이름만 찍으면 주소값만 나온다
char형은 찍으면 배열값이 나온다

배열의 길이만큼 나눌떄 배열이름.length를 사용한다


