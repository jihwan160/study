ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
---------------------------------------------------------------------------------------------------------
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/08

c드라이브 = 경로에 한글이 없어야 함
데이터를 다루는 작업 = 보수적으로 접근해라 = 이슈가 많기 때문에
JavaUtils = 자바 개발 유틸 폴더
JavaWorks = 실제 자바 코드 폴더

JDK= 자바 개발을 위한 키트(도구) = Java Develop kits
JVM = Java Vertsual Musine

1.8버전으로 개발을 할 것

줄루 NEXT NEXT INSTALL FINISH

명령 프롬프트 = 컴퓨터 명령을 통해서 컴퓨터를 제어

>java -version

자바는 컴파일방식 전체를 한번에 해석한다
속도는 빠르지만 에러잡기 어렵다
OS를 가리지 않는다

시스템 변수 새로만들기 JAVA_HOME으로하고 프로그램파일에 줄루를 찾는다 BIN이 보이게한다
시스템변수 path를 더블클릭하고 %JAVA_HOME%\bin을 새로 만들기해버린다

cd .. = 상위 디렉토리로 가는 방법
dir = 현재 디렉토리의 파일목록 보는법
d: 드라이브 이동
cd 폴더이름 = 하위 디렉토리로 가는 방법 
javac = 컴파일하는 명령어 그러면 class가 나온다
javac 파일명 (확장자뺴고)을 한번더 하면 실행이된다


파일 -> 스위치브라우저 -> 내가 저장할곳 설정
오른쪽 끝에 자바ee옆에 open perspective 에서 java로 open한다(초기상태로 돌리고싶으면 window에서 perspective 설정)
web browser external로 바꿈

web에서 css html jsp 언어를 utf8로 바꿈
자바의 업무단위 = 프로젝트가 기준
프로젝트 = 폴더단위로 관리

new = java project로 만들면된다
프로젝트이름의 첫글자 무조건 대문자로 해야함

jre = 버전을 1.8로 바꾼다
패키지 이름은 소문자로만 작성
자바는 클래스 묶음
클래스이름은 대문자

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/09

자바= OOP
Object Oriented Programming

Object = 자바에서 "클래스"라고 인식
클래스 = 설계도?

public(공공의) = 접근제어자라고 부르고 모두가 접근할수있다

static(정적인) = 메모리 공간에 한번에 올라간다 
void = 텅 빈 | 리턴타입이 없을 떄 사용
main의 매개변수는 무조건 문자열로 받는다
자바는 무조건 메서드 일 경우 리턴타입이 있어야한다

예외 = 코딩으로 고칠수있는 것
에러 = 심각한 문제

기본 변수 타입/"스택" 영역에 직접 들어간다
문자=char
숫자 = 정수 = byte,int,short,long | 실수 =  float,double 
논리형 = boolean


데이터 손실 = 큰 데이터 타입을 작은 데이터타입에 넣는 것
작은데이터타입을 큰데이터타입에 넣는것 = 자동 형변환



참조 데이터 타입 / 'Heap' 영역 / 동적 데이터
String = 메모리 저장공간이 다르다 = char들의 모임

printf() 이용한 출력 = 같은 값이라도 다른 형식으로 출력하고 싶을 떄 사용
%f = 부동소숫점 타입=> 소숫점 6자리까지 표현되고 7자리에서 반올림, %n = 줄바꿈


%s = 문자열 길이만큼 출력공간 확보

[%20s] = 문자열 20 길이만큼 출력공간 확보, 남은공간은 빈 문자열로 채워짐 왼쪽이 비워짐
[%-20s] = 문자열 20 길이만큼 출력공간 확보, 남은공간은 빈 문자열로 채워짐 반대로 오른쪽이 비워짐

[%.8s] = 왼쪽에서 8글자만 출력 | . 을 붙이면 문자열 일부만 출력


src폴더를 다 가져가서
프로젝트를 다 만들고 복사붙여넣기한다


literal = 상수와 비슷한 값 , 변하지 않음

문자 = ''로 사용
문자열 = ""로 사용 
서로 바뀌면 오류남

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/10

코딩의시작은 변수
main메서드안에 
int a = 10; <- 메인 메서드블록에 선언
if(){} <- if문 블록 = 지역변수
{} <- 코드블록

변수 = 한개의 데이터만 들어올수있음 = 값을 한개만 가질수 있는 공간
상수 = 절대 변하지 않는 데이터 = 한번만 값을 저장
const
리터럴 -> 값 그 자체 => int num = 1;

접미사
boolean = true, false
실수 = float , double
float는 뒤에 f가붙는다
double은 뒤에 d가 붙지만 기본값이라 안붙인다

변수에서 중요한 것이 초기값이다
boolean 의 초기값은 false
char 의 초기값은 공백인데 'u0000' 이라고도 표현한다
정수 의 초기값은 0;
long 의 초기값은 = 0L
float 의 초기값은 0.0f
double 의 초기값은 0.0 | 0.0d

참조 변수 의 초기값은 null;

Math = 객체
대문자 = 무조건 상수 자바에서 약속함

Escape 문자 = 회피문자

MVC = 디자인 패턴
MODEL VIEW CONTROL
DB       

'0' = 유니코드로 48이다

scanner
입력스트림
input Stream

자바의 최상위클래스는 object클래스이다
풀네임 = 패키지명 클래스

자바는 100% 데이터타입을 가진다


new Scanner (null)
null = 생성자 함수를 생성해서 넣어줘야한다
초기값을 세팅하기 위해서

scan = stack영역에 들어간다 ==>>  scanner객체는 heap영역에 들어간다
주소값 참조방식

자바의 클래스는 객체

클래스를 new 해서 메모리에 올리는 순간을 인스턴스화라고 한다

ctrl + shift + o import안한 클래스 해줌

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/13

형변환 () 괄호안에 데이터타입을 쓴다 ex) (float)num2

자바는 연산자기준으로 전위 후위를 정한다


대입연산자(할당연산자) = (연산우선순위) 최하위

산술연산자 = 사칙연산 +,-,/,*,%(나머지)

증가연산자 = 1씩 증가(++변수) => 결괏값이 바로 적용

d. 부호 연산자
: 피연산자의 부호를 반대로 변경한 결과를 반환, 양수면 음수 | 음수면 양수
+ 형식적 추가로 쓰이는 경우 거의 없음
기본형에만 사용가능 | 단, boolean형 char형 제외

논리연산자 = &&(논리곱 = 참%%참 => 참), ||(논리합 = 참||거짓 => 참), !(논리부정 = 단항연산자 => 결과값의 반대)

복합대입연산자 : 대입연산자와 다른 연산자를 조합하여 사용, 데이터 누적 | +=,-=,*=,/=,%=

삼항조건 연산자 : 조건식>결과1(true일경우 실행) : 결과2(false일 경우 실행)

유니코드(Unicode) = 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업표준

Math.round() 반올림 = 반올림시 사용. 소숫점 첫째자리에서 반올림한 결과를 (정수)로 리턴

나머지 연산자 : 나누는 수를 0으로 사용할수 없음. 피연산자로 정수, 실수 허용함

나누는 수로 음수를 허용, 그러나 부호는 무시됨 = 음수의 절대값으로 나누는 것과 같음

a. 산술 변환
: 이항 연산자는 두 피연산자의 타입이 일치해야 연산 가능.
연산전에 큰 데이터 타입으로 자동형변환 되는것
=> 데이터 소실이 없어야 하기때문에 당연

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@23/03/14














